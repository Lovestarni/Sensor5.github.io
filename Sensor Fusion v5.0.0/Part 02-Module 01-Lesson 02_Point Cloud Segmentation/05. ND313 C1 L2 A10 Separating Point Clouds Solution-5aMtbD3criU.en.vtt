WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.504
Well, let's go ahead and check out the solution for how to do the point cloud separation.

00:00:05.504 --> 00:00:10.605
So this is how I did it,

00:00:10.605 --> 00:00:17.280
and what I did here is I have this PointCloud&lt;PointT&gt;,

00:00:17.280 --> 00:00:21.225
I'm doing that for both new obstacle cloud and a plane cloud.

00:00:21.225 --> 00:00:26.325
So I'm just creating this new pcl::PointCloud&lt;PointT&gt;: for both of those,

00:00:26.324 --> 00:00:28.739
and then I want to be able to film up.

00:00:28.739 --> 00:00:31.079
So for that plane cloud,

00:00:31.079 --> 00:00:33.509
I'm passing in the inliers,

00:00:33.509 --> 00:00:36.599
and so I'm calling this function down below here,

00:00:36.600 --> 00:00:38.835
so in this segment plane,

00:00:38.835 --> 00:00:48.179
I'm actually going to be setting my seg result.

00:00:48.179 --> 00:00:52.929
It's going to be equal to whatever separate clouds functions give me back,

00:00:52.929 --> 00:00:54.954
which is that pair of point clouds,

00:00:54.954 --> 00:00:58.899
and I'm going to give it the inliers that I just generated and I'm going to

00:00:58.899 --> 00:01:03.835
give it the point cloud that we're working from as our reference.

00:01:03.835 --> 00:01:09.064
Now that it has that information, what I'm going to do,

00:01:09.064 --> 00:01:11.605
is when I'm generating this plane cloud,

00:01:11.605 --> 00:01:14.005
I'm just going to go ahead and iterate through it.

00:01:14.004 --> 00:01:19.134
We're seeing that inlier it's a vector of ints,

00:01:19.135 --> 00:01:23.640
so we can go ahead and iterate through it like this and grab that index,

00:01:23.640 --> 00:01:26.739
and then we can go ahead and for that plane cloud,

00:01:26.739 --> 00:01:29.469
we can grab its members variable.

00:01:29.469 --> 00:01:31.459
That's just a vector of a point T,

00:01:31.459 --> 00:01:33.479
and we can do a push-back on it,

00:01:33.480 --> 00:01:36.435
and we're going to grab from the cloud,

00:01:36.435 --> 00:01:40.418
our reference cloud, we're going to grab its member points,

00:01:40.418 --> 00:01:44.884
and then just grab that point T that lies at that index.

00:01:44.885 --> 00:01:47.430
Then we're going to do that for all the inliers.

00:01:47.430 --> 00:01:48.770
So all the inliers,

00:01:48.769 --> 00:01:51.109
all the indices from our point cloud that belong to

00:01:51.109 --> 00:01:54.564
the plane are going to be pushed into our plane cloud.

00:01:54.564 --> 00:01:58.399
Next, I'm going to be generating the obstacle cloud,

00:01:58.400 --> 00:02:00.980
and here I'm just going to do something that was very similar

00:02:00.980 --> 00:02:04.025
to that PCL documentation for a segmentation,

00:02:04.025 --> 00:02:06.505
which was using that extract object,

00:02:06.504 --> 00:02:09.034
so here and then I'm using a point T,

00:02:09.034 --> 00:02:12.770
because of my template, and basically all you need to give it is,

00:02:12.770 --> 00:02:15.200
"Hey, here's the reference cloud."

00:02:15.199 --> 00:02:17.389
Then here are the inliers,

00:02:17.389 --> 00:02:19.134
and I set it to negative,

00:02:19.134 --> 00:02:20.774
so I set negative true,

00:02:20.775 --> 00:02:23.849
and then, "Hey here's that obstacle cloud."

00:02:23.849 --> 00:02:25.919
So the obstacle cloud was a pointer,

00:02:25.919 --> 00:02:29.294
so I go ahead and de-reference it when I pass it into filter.

00:02:29.294 --> 00:02:33.209
What's that's going to do is in our reference cloud,

00:02:33.210 --> 00:02:39.170
all the points that are not the inliers are kept.

00:02:39.169 --> 00:02:42.784
The inlier points are removed from that reference cloud,

00:02:42.784 --> 00:02:45.044
so now it's just the obstacles,

00:02:45.044 --> 00:02:48.334
everything besides the plane cloud.

00:02:48.335 --> 00:02:54.890
Now all I have to do is go ahead and return the results.

00:02:54.889 --> 00:02:59.129
So I have that seg result,

00:02:59.129 --> 00:03:01.799
and before it was cloud,

00:03:01.800 --> 00:03:05.945
but now it's going to be returning that obstacle cloud that I just

00:03:05.944 --> 00:03:11.479
instantiated and I generate all the points that it needs,

00:03:11.479 --> 00:03:14.209
and it's also going to have that plane cloud.

00:03:14.210 --> 00:03:16.250
So the first one's obstacle cloud,

00:03:16.250 --> 00:03:17.629
and then plane cloud.

00:03:17.629 --> 00:03:24.780
Then that's what my separate cloud function is going to return for us,

00:03:24.780 --> 00:03:31.469
and so after it calls that separate cloud,

00:03:31.469 --> 00:03:35.960
it has the pair and it's going to just be able to return that for that seg result,

00:03:35.960 --> 00:03:38.900
because down here in the segment plane,

00:03:38.900 --> 00:03:43.735
that seg result is equal to what that separate clouds was outputting.

00:03:43.735 --> 00:03:48.690
So I'm going to go ahead and save that,

00:03:48.689 --> 00:03:52.944
and I'm ready to go back into environment.CPP now,

00:03:52.944 --> 00:03:56.539
and basically just do what the classroom was showing,

00:03:56.539 --> 00:04:06.555
and I'm going to call that point processor segment plane.

00:04:06.555 --> 00:04:08.900
Now, here I'm just doing dull because I was

00:04:08.900 --> 00:04:11.510
just instantiating the point processor on the stack.

00:04:11.509 --> 00:04:13.459
If you do it on the heap instead,

00:04:13.460 --> 00:04:18.160
you use that arrow indicator,

00:04:18.160 --> 00:04:22.580
and then the segment plane is going to be using the input cloud and I'm just

00:04:22.579 --> 00:04:26.539
going to try out a 100 iterations for the max iterations,

00:04:26.540 --> 00:04:30.670
and I'm going to try a distance threshold of 0.2,

00:04:30.670 --> 00:04:34.694
and that's going to create our pair,

00:04:34.694 --> 00:04:37.060
and we're calling that segment cloud.

00:04:37.060 --> 00:04:38.149
Now for rendering it,

00:04:38.149 --> 00:04:41.289
I'm just going to grab that first element of the segment cloud,

00:04:41.290 --> 00:04:42.800
which is that obstacle cloud,

00:04:42.800 --> 00:04:45.329
that was the first element,

00:04:45.329 --> 00:04:48.724
and then the second element is going to be the plane cloud,

00:04:48.725 --> 00:04:50.075
and then for the color,

00:04:50.074 --> 00:04:53.509
I'm just going to make sure that the optimal cloud is red,

00:04:53.509 --> 00:04:56.050
and then the plane cloud is going to be green.

00:04:56.050 --> 00:05:01.290
So here, I had everything set up environment.CPP.

00:05:01.290 --> 00:05:04.920
I'm calling that segment plane Function,

00:05:04.920 --> 00:05:10.780
and I'm going to go ahead and try building this.

00:05:12.399 --> 00:05:16.054
One other thing I probably want to do right here

00:05:16.055 --> 00:05:19.280
is I don't want to render the original point cloud.

00:05:19.279 --> 00:05:21.679
We could see what it looks like I guess,

00:05:21.680 --> 00:05:24.894
but be nicer if that was turned off,

00:05:24.894 --> 00:05:30.875
because right now if I do environment maybe it just overlapped it actually,

00:05:30.875 --> 00:05:33.829
but that original render cloud is just going to be white,

00:05:33.829 --> 00:05:36.504
but it looks like it wrote over it.

00:05:36.504 --> 00:05:38.279
So that's nice.

00:05:38.279 --> 00:05:41.750
So we can see our plane cloud in green,

00:05:41.750 --> 00:05:45.154
and we can see our obstacle cloud in red now, awesome,

00:05:45.154 --> 00:05:49.369
because basically, later down the pipeline,

00:05:49.370 --> 00:05:51.935
we can feed in the obstacle point cloud,

00:05:51.935 --> 00:05:53.764
ones that belonged to the car,

00:05:53.764 --> 00:05:57.844
and do some more clustering on it, so very cool.

00:05:57.845 --> 00:06:02.420
This is basically the segmentation process at work right here,

00:06:02.420 --> 00:06:05.449
and now we're actually ready to actually

00:06:05.449 --> 00:06:08.560
start diving into how this works more specifically,

00:06:08.560 --> 00:06:12.870
and you're going to be implementing RANSAC from scratch.

