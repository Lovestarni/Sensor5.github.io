WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.649
Now, the first thing I want to do in

00:00:01.649 --> 00:00:04.469
the midterm product is to set up the loading procedure for the images,

00:00:04.469 --> 00:00:05.939
which is currently not optimal.

00:00:05.940 --> 00:00:07.380
The student version of a code,

00:00:07.379 --> 00:00:11.399
we simply push all images into a vector instead of foreloop and with every new image,

00:00:11.400 --> 00:00:13.050
the data structure grows.

00:00:13.050 --> 00:00:15.720
Now, imagine you want to process now 10 images,

00:00:15.720 --> 00:00:17.490
but let's say 5,000 images,

00:00:17.489 --> 00:00:19.439
and also light upon clouds overnight,

00:00:19.440 --> 00:00:21.429
and the current implementation of a code,

00:00:21.429 --> 00:00:23.899
this would push the memory of your computer to its limits

00:00:23.899 --> 00:00:26.539
and eventually slow down the entire program.

00:00:26.539 --> 00:00:27.829
So in order to prevent this,

00:00:27.829 --> 00:00:30.259
we only want to hold a certain number of images in

00:00:30.260 --> 00:00:33.079
memory so that when a new one arrives on one end,

00:00:33.079 --> 00:00:35.179
the oldest one on the other end is deleted from

00:00:35.179 --> 00:00:37.685
the vector and the new one is added to the front.

00:00:37.685 --> 00:00:40.370
This concept is called a ring buffer and it will be

00:00:40.369 --> 00:00:43.099
your first task to implement this in the code.

00:00:43.100 --> 00:00:48.245
Let's take a look. So here we are again in the midterm project cameras student main file.

00:00:48.244 --> 00:00:52.519
If you move a little bit downwards to this section here,

00:00:52.520 --> 00:00:54.859
you will find the first student assignment.

00:00:54.859 --> 00:00:59.030
Now, we have three lines currently where we instantiate a data frame

00:00:59.030 --> 00:01:00.725
variable which you will find

00:01:00.725 --> 00:01:04.299
defined in data structures today, you should look it up there.

00:01:04.299 --> 00:01:07.819
This has one element which is called camera IMG,

00:01:07.819 --> 00:01:12.079
and this simply takes the grayscale image which we just loaded from file.

00:01:12.079 --> 00:01:14.510
In this line here, line 66,

00:01:14.510 --> 00:01:18.185
the entire data frame is simply pushed into an STL lecture.

00:01:18.185 --> 00:01:22.939
Now imagine, you have a very large image sequence consisting of let's say 5,000,

00:01:22.939 --> 00:01:29.750
10,000 images and you would push all this data into the vector which would grow.

00:01:29.750 --> 00:01:33.349
Some hours after or some hours into the processing,

00:01:33.349 --> 00:01:34.909
you would come back to your computer to collect

00:01:34.909 --> 00:01:38.149
the results and you would find it totally slow down,

00:01:38.150 --> 00:01:40.790
which basically is the result of too high memory load.

00:01:40.790 --> 00:01:43.280
In order to lower the memory load,

00:01:43.280 --> 00:01:49.219
we have to find a more optimal data structure and a more optimal way of treating data.

00:01:49.219 --> 00:01:51.349
The way to do this is to use a ring buffers.

00:01:51.349 --> 00:01:54.589
So instead of simply adding all the frames

00:01:54.590 --> 00:01:57.859
to the end of the queue and increasing the size of the queue,

00:01:57.859 --> 00:02:03.799
we want to rotate the elements in a way that every new element is added to the end of

00:02:03.799 --> 00:02:07.219
the data buffer and all the other elements are shifted to

00:02:07.219 --> 00:02:10.879
the left and the last element which we do not want to consider anymore.

00:02:10.879 --> 00:02:13.939
The last element is also defined by a let's move upwards

00:02:13.939 --> 00:02:17.645
to line 40 by the size indicated here.

00:02:17.645 --> 00:02:19.330
Data buffer size currently two,

00:02:19.330 --> 00:02:22.850
it might be three for the constant acceleration motion model.

00:02:22.849 --> 00:02:24.799
Now, we are using constant velocity and that

00:02:24.800 --> 00:02:27.365
requires us to only have two images at one time.

00:02:27.365 --> 00:02:33.085
But increasing this would mean also increasing the size of the entire data buffer.

00:02:33.085 --> 00:02:36.710
The oldest element in the buffer is simply shifted out while

00:02:36.710 --> 00:02:41.000
the youngest element is pushed into the buffer on the right-hand side.

00:02:41.000 --> 00:02:48.210
So this rotational operation is what you are supposed to implement here at this position.

