WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:02.000
[男性]これは私のコードです

00:00:02.000 --> 00:00:04.000
これを正しく理解すれば

00:00:04.000 --> 00:00:09.000
そのことに驚くでしょう

00:00:09.000 --> 00:00:12.000
非常に多くのクラスを取り

00:00:12.000 --> 00:00:16.000
学生に説明し 1つのクラスの中でも

00:00:16.000 --> 00:00:19.000
その要旨を理解し コードを書いてきたということであり

00:00:19.000 --> 00:00:23.000
それは簡単なことではなく 何度も再利用でき

00:00:23.000 --> 00:00:27.000
他の車両をチェックするGoogle自動運転車の能力の中核だからです

00:00:27.000 --> 00:00:30.000
これが測定の更新と予測について

00:00:30.000 --> 00:00:33.000
以前に示したものの

00:00:33.000 --> 00:00:36.000
1行ずつの実装であり

00:00:36.000 --> 00:00:39.000
これが実装する行列を使用して

00:00:39.000 --> 00:00:42.000
示したものを正確に1ステップずつ実装することがわかります

00:00:42.000 --> 00:00:44.000
少し難しいです

00:00:44.000 --> 00:00:47.000
n番目の測定の測定行列を作る必要があります

00:00:47.000 --> 00:00:50.000
問題を解く場合 およらくこのようになります

00:00:50.000 --> 00:00:52.000
矢印の計算

00:00:52.000 --> 00:00:55.000
行列Sと転置

00:00:55.000 --> 00:00:58.000
カルマンゲインKと反転

00:00:58.000 --> 00:01:03.000
次の予測と測定の更新に戻り

00:01:03.000 --> 00:01:05.000
これが予測ステップです

00:01:05.000 --> 00:01:09.000
私が示したとおりのものを

00:01:09.000 --> 00:01:12.000
この2つの式で実装しているのがわかります

00:01:12.000 --> 00:01:16.000
このプログラミングが複雑なことはわかっているので

00:01:16.000 --> 00:01:18.000
皆さんにこれができたとしたら驚きです

00:01:18.000 --> 00:01:22.000
これができたら 非常に大きなことを達成したことになります

00:01:22.000 --> 00:01:25.000
カルマンフィルターを理解でき

00:01:25.000 --> 00:01:28.000
多次元カルマンフィルターを実装しました

00:01:28.000 --> 00:01:33.000
私が書いたかなり機械的な行列クラスを使用して

00:01:33.000 --> 00:01:35.000
すべてあなた自身で

00:01:35.000 --> 00:01:38.000
これを実行すると 非常に良い結果が得られ

00:01:38.000 --> 00:01:44.000
一連の位置推測1 2 3から

00:01:44.000 --> 00:01:47.000
動いている物体の

00:01:47.000 --> 00:01:51.000
速度を予測し理解できます

00:01:51.000 --> 00:01:54.000
これらは実装したばかりの式です

00:01:54.000 --> 00:01:56.000
おめでとうございます

00:01:56.000 --> 00:01:59.000
基本的なことをしっかり理解できました

00:01:59.000 --> 00:02:02.000
それは人工知能と自動運転車の構築にとって

00:02:02.000 --> 00:02:05.000
不可欠のものだと思います

00:02:05.000 --> 00:02:09.000
事実上 他の車を見つける方法を実装しました

00:02:09.000 --> 00:02:12.000
これを文脈にあてはめてみましょう

00:02:12.000 --> 00:02:14.000
これはGoogle 自動運転車です

00:02:14.000 --> 00:02:16.000
これは別の車です

00:02:16.000 --> 00:02:21.000
Google自動運転車はフロントバンパーのレーダーを使って

00:02:21.000 --> 00:02:24.000
車両までの距離を測定し

00:02:24.000 --> 00:02:27.000
ノイズの多い速度推定も行います

00:02:27.000 --> 00:02:30.000
またレーザーを使用して

00:02:30.000 --> 00:02:33.000
やはり他の車との距離を測定しますが 速度は測定しません

00:02:33.000 --> 00:02:36.000
この状況を上から見ると

00:02:36.000 --> 00:02:38.000
これがGoogle車です

00:02:38.000 --> 00:02:40.000
これは地図上でローカライズされます

00:02:40.000 --> 00:02:45.000
ここに別の車があり もう1台あります

00:02:45.000 --> 00:02:51.000
レーダーとレーザーを使用して Google車はこれらすべての車の

00:02:51.000 --> 00:02:54.000
距離と速度を推定し

00:02:54.000 --> 00:02:58.000
カルマンフィルターを使用します

00:02:58.000 --> 00:03:00.000
レーザーからフィードおよび範囲データが得られ

00:03:00.000 --> 00:03:07.000
このようなステートスペースを使ってxとyの相対距離と

00:03:07.000 --> 00:03:11.000
xとyの相対速度から 先ほど示したような

00:03:11.000 --> 00:03:15.000
状態遷移行列を求めて

00:03:15.000 --> 00:03:18.000
これら他の車を見つけ出します  これは先ほど学習し

00:03:18.000 --> 00:03:21.000
プログラミングしたものと同じです

00:03:21.000 --> 00:03:24.000
レーダーとレーザーから他の車の位置を抽出する方法はお話ししませんでした

00:03:24.000 --> 00:03:26.000
対応問題と呼ばれるものがあります

00:03:26.000 --> 00:03:28.000
それぞれがどの車かわからないときがあり

00:03:28.000 --> 00:03:31.000
これについては詳しく述べません

00:03:31.000 --> 00:03:34.000
しかし ソリューションの要旨が理解できれば

00:03:34.000 --> 00:03:36.000
プログラムすることができます

00:03:36.000 --> 00:03:38.000
このような状況になったら

00:03:38.000 --> 00:03:42.000
レーザーデータやレーダーデータなどの範囲データを使用して

00:03:42.000 --> 00:03:44.000
他の車の瞬間的な測定を取る

00:03:44.000 --> 00:03:47.000
合理的なアルゴリズムを考案し

00:03:47.000 --> 00:03:51.000
位置だけでなく移動速度も推定できます

00:03:51.000 --> 00:03:53.000
それは実に大きな功績です

00:03:53.000 --> 00:03:55.000
ここまでの達成 おめでとうございます

00:03:55.000 --> 00:03:57.000
私のクラスでここまでやり遂げたなら

00:03:57.000 --> 00:04:01.000
このクラス全体で教えなければならない

00:04:01.000 --> 00:04:03.000
最も困難な部分は消化できたと言えます

00:04:03.000 --> 99:59:59.999
おめでとうございます

