WEBVTT
Kind: captions
Language: en

00:00:00.370 --> 00:00:02.880
In this video I would
like to discuss with you

00:00:02.880 --> 00:00:07.500
how to choose noise parameters and
how to evaluate this choice.

00:00:07.500 --> 00:00:10.690
This is not only related to
the unscented Kalman filter,

00:00:10.690 --> 00:00:13.690
but it can be applied
to any Bayesian filter.

00:00:13.690 --> 00:00:17.748
When we talked about our process and
our measurement models,

00:00:17.748 --> 00:00:20.958
we introduced several
sources of uncertainty.

00:00:20.958 --> 00:00:25.178
In the process model,
we introduced the process noise nu k.

00:00:25.178 --> 00:00:26.828
And in the measurement model,

00:00:26.828 --> 00:00:30.040
we introduced the measurement
noise omega k.

00:00:30.040 --> 00:00:34.425
In case of a radar measurement, this was
the noise of the distance measurement

00:00:34.425 --> 00:00:39.640
rho, the angle measurement phi,
and the radial velocity rho dot.

00:00:39.640 --> 00:00:44.580
We also quantified the noise with
the process noise covariance matrix and

00:00:44.580 --> 00:00:46.730
the measurement noise covariance matrix.

00:00:46.730 --> 00:00:48.818
So these are the variances of the noise.

00:00:48.818 --> 00:00:52.470
And they quantify how
strong the noise is.

00:00:52.470 --> 00:00:56.460
But we haven't discussed where
we get these values from.

00:00:56.460 --> 00:00:58.500
Let's start with the measurement noise.

00:00:58.500 --> 00:01:02.600
This noise describes how
precise the sensor can measure.

00:01:02.600 --> 00:01:05.540
It means we have to look
into the sensor manual and

00:01:05.540 --> 00:01:08.030
see how precise the sensor is.

00:01:08.030 --> 00:01:12.810
For example, we might read that radar
can measure the distance rho

00:01:12.810 --> 00:01:16.410
with the standard
deviation of 0.3 meters.

00:01:16.410 --> 00:01:20.159
This means we know the value for
the variance sigma rho squared,

00:01:20.159 --> 00:01:22.250
which is 0.09 meters squared.

00:01:23.300 --> 00:01:27.100
We also have to assume the noise
is white and normally distributed.

00:01:27.100 --> 00:01:29.740
Which is of course not true for
some sensors.

00:01:29.740 --> 00:01:32.758
It is a little more difficult to
choose an appropriate process noise.

00:01:32.758 --> 00:01:33.601
In reality,

00:01:33.601 --> 00:01:38.598
objects in a traffic environment don't
move with white acceleration noise.

00:01:38.598 --> 00:01:42.860
This would mean a driver constantly
switches between gas and brake.

00:01:42.860 --> 00:01:45.860
So we really apply a strong
approximation here,

00:01:45.860 --> 00:01:48.300
by assuming a white process noise.

00:01:48.300 --> 00:01:51.790
A rule of thumb for
getting useful values is the following.

00:01:51.790 --> 00:01:54.660
Try to estimate what
the maximum acceleration is you

00:01:54.660 --> 00:01:55.850
expect in your environment.

00:01:57.050 --> 00:02:00.140
Let's say we want to track
cars in an urban environment.

00:02:00.140 --> 00:02:02.240
Then these cars usually
don't accelerate or

00:02:02.240 --> 00:02:04.800
brake stronger than 6
meters per second squared.

00:02:05.960 --> 00:02:07.650
Now, the rule of thumb says,

00:02:07.650 --> 00:02:12.390
choose half of the maximum acceleration
you expect as process noise.

00:02:12.390 --> 00:02:17.195
In this case, we would choose 9 meters
squared over seconds to the power 4 as

00:02:17.195 --> 00:02:18.679
variance for the acceleration noise.

00:02:19.830 --> 00:02:23.629
If this is a good value for
you really depends on your application.

00:02:23.629 --> 00:02:27.248
Is it important for your application
to react fast on changes?

00:02:27.248 --> 00:02:30.137
Then you choose the process
noise a little higher.

00:02:30.137 --> 00:02:32.915
Is it important to provide
smooth estimations?

00:02:32.915 --> 00:02:35.882
Then you choose the process
noise a little lower.

00:02:35.882 --> 00:02:39.286
Usually, you want to know of course
if you set up the noise parameters

00:02:39.286 --> 00:02:40.520
correctly.

00:02:40.520 --> 00:02:44.340
For that purpose, you can run
a consistency check on the filter.

00:02:44.340 --> 00:02:46.350
What does consistency mean?

00:02:46.350 --> 00:02:51.520
At every time cycle, we calculate the
measurement prediction zk + 1 pipe k and

00:02:51.520 --> 00:02:54.870
the covariance matrix
S of this prediction.

00:02:54.870 --> 00:02:58.949
Then we receive the actual measurement
zk + 1 for that time step.

00:02:58.949 --> 00:03:01.170
In this example, everything looks okay.

00:03:01.170 --> 00:03:04.742
The actual measurement occurred
somewhere inside the error ellipse.

00:03:04.742 --> 00:03:07.060
But this might look differently.

00:03:07.060 --> 00:03:10.440
Imagine you set up a filter, and
your measurement looks like this.

00:03:10.440 --> 00:03:11.980
Here, something is wrong.

00:03:11.980 --> 00:03:14.580
You constantly underestimate
the uncertainty of

00:03:14.580 --> 00:03:16.310
the predicted measurement.

00:03:16.310 --> 00:03:18.830
This means your filter
is not consistent.

00:03:18.830 --> 00:03:21.641
Of course,
these are all stochastic processes.

00:03:21.641 --> 00:03:24.270
And it might just be
a natural coincidence.

00:03:24.270 --> 00:03:26.720
But if the results
keep looking like this,

00:03:26.720 --> 00:03:29.250
this explanation is extremely unlikely.

00:03:29.250 --> 00:03:32.200
This result tells you that you
underestimate the uncertainty

00:03:32.200 --> 00:03:33.390
in your system.

00:03:33.390 --> 00:03:36.670
Your estimate is less
precise than you think.

00:03:36.670 --> 00:03:39.080
The same can happen in
the other direction.

00:03:39.080 --> 00:03:40.008
Look at this example.

00:03:40.008 --> 00:03:43.676
Here you overestimate
the uncertainty of your system.

00:03:43.676 --> 00:03:47.800
It means your estimate is actually
more precise than you think.

00:03:47.800 --> 00:03:50.630
So this filter is also inconsistent.

00:03:50.630 --> 00:03:54.799
A filter is consistent if it provides
a realistic estimation uncertainty.

00:03:55.970 --> 00:03:58.920
It is very easy to check
the consistency of your filter, and

00:03:58.920 --> 00:04:02.250
I recommend to always do that
when you design a filter.

00:04:02.250 --> 00:04:05.190
An important consistency
check is called NIS,

00:04:05.190 --> 00:04:08.110
it means Normalized Innovation Squared.

00:04:08.110 --> 00:04:10.665
This is how the NIS is calculated.

00:04:10.665 --> 00:04:11.770
Its meaning is very intuitive.

00:04:12.840 --> 00:04:15.870
The innovation is the difference
between the predicted measurement and

00:04:15.870 --> 00:04:17.459
the actual measurement.

00:04:17.459 --> 00:04:22.340
And normalized means you put it into
relation to the covariance matrix S.

00:04:22.340 --> 00:04:25.970
That's why you have the inverse
of the matrix S here.

00:04:25.970 --> 00:04:29.410
The NIS is just a scalar number and
super easy to calculate.

00:04:29.410 --> 00:04:31.570
But you need to know
what number to expect.

00:04:31.570 --> 00:04:35.480
For that, you need to know something
about the statistics of this NIS.

00:04:35.480 --> 00:04:39.010
The NIS value follows a distribution
which is called chi-squared

00:04:39.010 --> 00:04:40.330
distribution.

00:04:40.330 --> 00:04:44.770
If you Google chi-squared distribution,
you will find a table like this.

00:04:44.770 --> 00:04:48.160
And this table tells you the number
you should expect for your NIS.

00:04:49.200 --> 00:04:51.660
Let's find the right number for
our example.

00:04:51.660 --> 00:04:53.660
DF means degrees of freedom.

00:04:53.660 --> 00:04:55.647
That's the dimension of
our measurement space.

00:04:55.647 --> 00:04:58.470
We have a three-dimensional
radar measurement.

00:04:58.470 --> 00:05:00.430
So we have three degrees of freedom.

00:05:01.440 --> 00:05:03.662
So what do all these numbers mean?

00:05:03.662 --> 00:05:08.605
0.95 says statistically,
in 95% of all cases,

00:05:08.605 --> 00:05:12.320
your NIS will be higher than 0.352.

00:05:12.320 --> 00:05:19.621
And this column says in 5% of all cases
your NIS will be higher than 7.815.

00:05:19.621 --> 00:05:22.565
Let's remember this number, 7.8.

00:05:22.565 --> 00:05:27.124
What you can always do when you
design a filter is plot the 95% line.

00:05:27.124 --> 00:05:29.319
In our case, that's 7.8.

00:05:29.319 --> 00:05:35.600
And then for every time step k,
calculate and plot also the NIS value.

00:05:35.600 --> 00:05:39.630
If you see something like this,
then everything looks great.

00:05:39.630 --> 00:05:44.060
Sometimes you are over the 95% line,
but that's what we expect.

00:05:44.060 --> 00:05:48.200
If you see something like this, it means
you underestimate the uncertainty in

00:05:48.200 --> 00:05:51.710
your system,
like in the example we saw before.

00:05:51.710 --> 00:05:53.670
If you see something like this,

00:05:53.670 --> 00:05:56.840
it means you overestimate
the uncertainty in your system.

00:05:56.840 --> 00:06:00.010
Your estimations are actually
more precise than you think.

00:06:00.010 --> 00:06:04.690
Unfortunately, the NIS test does not
tell you where the mistake comes from,

00:06:04.690 --> 00:06:06.710
but it gives you at least some feedback.

00:06:06.710 --> 00:06:10.690
In this case, for example, it might be
a good idea to reduce the process noise

00:06:10.690 --> 00:06:12.700
a little bit and try again.

00:06:12.700 --> 00:06:16.610
In the project, at the end of this
lesson, take a look at your NIS and

00:06:16.610 --> 00:06:19.010
use it to check your
process noise settings.

