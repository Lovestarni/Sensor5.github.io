WEBVTT
Kind: captions
Language: zh-CN

00:00:00.340 --> 00:00:02.549
欢迎来本课的第一个编程小练习

00:00:03.649 --> 00:00:07.150
我们要在 C++ 中实践已经学过的方法

00:00:07.150 --> 00:00:11.539
在这个小练习中 你需要写一个小函数来生成 sigma点

00:00:11.539 --> 00:00:13.609
我已经为你准备好了模板

00:00:13.609 --> 00:00:16.079
希望你能够迅速上手

00:00:16.079 --> 00:00:19.769
你需要编写一个名为 GenerateSigmaPoints 的函数

00:00:19.769 --> 00:00:23.050
它的收到的输入

00:00:23.050 --> 00:00:25.839
是指向一个矩阵的指针

00:00:25.839 --> 00:00:28.550
我会在函数末尾讲述其原理

00:00:28.550 --> 00:00:32.170
这次 我们要考虑 CTRV 模型的完整状态

00:00:32.170 --> 00:00:35.219
因此 我们把状态大小 n_x 设为 5

00:00:35.219 --> 00:00:40.299
这里 我们把设计参数 lambda 设为 3-n_x 这个之前说过

00:00:40.299 --> 00:00:42.329
然后 我们为案例集合 x 和

00:00:42.329 --> 00:00:46.649
案例协方差矩阵 P 设一些现实数值

00:00:46.649 --> 00:00:49.320
现在 我们创建一个叫做 Xsig 的矩阵

00:00:49.320 --> 00:00:53.829
这个矩阵有 5 行 11 列

00:00:53.829 --> 00:00:56.899
后面生成的 sigma点会放在这个矩阵里

00:00:56.899 --> 00:00:58.539
这里 我给了点小提示

00:00:58.539 --> 00:01:03.070
帮助你计算矩阵 P 的协方差的平方根矩阵

00:01:03.070 --> 00:01:08.049
这里你可以看到两个函数调用 它们是 Eigen 库的一部分

00:01:08.049 --> 00:01:12.280
它执行 Cholesky 分解并提供我们需要的结果

00:01:12.280 --> 00:01:15.790
你可以谷歌搜索该方法 进一步了解

00:01:15.790 --> 00:01:17.662
你的代码要放在这里

00:01:17.662 --> 00:01:20.999
你需要计算所有 11 个 sigma点

00:01:20.998 --> 00:01:24.599
并使用 sigma点填充 Xsig 各栏

00:01:24.599 --> 00:01:27.140
填充矩阵时 有一点很重要

00:01:27.140 --> 00:01:30.769
 sigma点的顺序必须和我在视频中展示的一样

00:01:30.769 --> 00:01:33.579
这样才能保证评估的正常进行

00:01:33.579 --> 00:01:37.609
在最后 结果会打印出来 方便你检查其是否现实

00:01:37.609 --> 00:01:40.900
我们收到了Xsig_out 指针作为输入

00:01:40.900 --> 00:01:42.500
它指向一个矩阵

00:01:42.500 --> 00:01:45.609
这里 我们把结果放入矩阵

00:01:45.609 --> 00:01:48.700
请不要修改学员代码区域以外的任何内容

00:01:48.700 --> 00:01:50.939
否则结果评估可能出现问题

00:01:51.950 --> 00:01:54.730
这些编程作业的部分挑战

00:01:54.730 --> 00:01:59.270
涉及如何处理 Eigen 库的栏和矩阵

00:01:59.269 --> 00:02:02.579
请查看作业描述中的 Eigen 参考表格

00:02:02.579 --> 00:02:03.629
里面有很多有用信息

