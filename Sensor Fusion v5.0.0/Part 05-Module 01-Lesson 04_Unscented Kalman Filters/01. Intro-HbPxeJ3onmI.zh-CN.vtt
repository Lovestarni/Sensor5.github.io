WEBVTT
Kind: captions
Language: zh-CN

00:00:00.720 --> 00:00:04.589
恭喜 你已经掌握了扩展卡尔曼滤波器

00:00:04.589 --> 00:00:07.759
你可以用它解决和高级驾驶

00:00:07.759 --> 00:00:10.859
辅助系统和无人驾驶车相关的问题

00:00:10.859 --> 00:00:14.517
- 绝对可以 如果检查带有自动车距保持功能的

00:00:14.518 --> 00:00:19.356
汽车和巡航控制系统的代码 你会发现里面有扩展卡尔曼滤波器

00:00:19.356 --> 00:00:21.939
- 还有一种方法 在这个领域越来

00:00:21.939 --> 00:00:24.149
越受关注

00:00:24.149 --> 00:00:27.848
它叫做无损卡尔曼滤波器 简称 UKF

00:00:27.849 --> 00:00:30.798
它的结果更好

00:00:30.798 --> 00:00:35.579
UKF 是处理非线性过程模型或

00:00:35.579 --> 00:00:37.920
非线性测量模型的替代方法

00:00:37.920 --> 00:00:42.429
但是 UKF 不会对非线性函数进行线性化处理

00:00:42.429 --> 00:00:46.299
它使用所谓的 sigma点来近似概率分布

00:00:46.299 --> 00:00:48.529
- 这有两个优势

00:00:48.530 --> 00:00:51.870
在很多情况下  sigma点近似非线性转换

00:00:51.869 --> 00:00:54.209
的效果比线性化更好

00:00:54.210 --> 00:00:58.420
此外 它还可以省去计算雅可比矩阵的过程

00:00:58.420 --> 00:01:00.660
- 学员通过这堂课能学到什么？

00:01:00.659 --> 00:01:02.899
- 这堂课分三部分

00:01:02.899 --> 00:01:05.939
首先 我会介绍一个更复杂的过程模型

00:01:05.939 --> 00:01:08.739
这个模型能够估算车辆的转弯速率

00:01:08.739 --> 00:01:11.390
然后 我会展示如何使用无损卡尔曼滤波器

00:01:11.390 --> 00:01:13.650
处理这个非线性过程模型

00:01:13.650 --> 00:01:18.020
最后 我们会在 C++ 中一起逐步实现这个滤波器

00:01:18.019 --> 00:01:20.069
并用它解决一个有难度的追踪场景

00:01:21.370 --> 00:01:23.340
- 我们开始吧 看看 UKF 是怎么用的

