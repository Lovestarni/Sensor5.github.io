WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.440
We start at the beginning of the UKF processing chain which means,

00:00:04.440 --> 00:00:07.935
we are in the prediction step and we want to generate Sigma points.

00:00:07.934 --> 00:00:10.410
At the beginning of the prediction step,

00:00:10.410 --> 00:00:13.634
we have the posterior state x k k,

00:00:13.634 --> 00:00:19.964
and the posterior covariance matrix P k k from the last iteration.

00:00:19.964 --> 00:00:23.384
They represent the distribution of our current state,

00:00:23.385 --> 00:00:25.215
and for this distribution,

00:00:25.214 --> 00:00:27.509
we now want to generate Sigma points.

00:00:27.510 --> 00:00:30.929
The number of Sigma points depends on the state dimension.

00:00:30.929 --> 00:00:34.789
Remember, this is the state vector of the CTR V model.

00:00:34.789 --> 00:00:38.585
So, the dimension of our state is an x equals five.

00:00:38.585 --> 00:00:43.160
We will choose two times an x plus one Sigma points.

00:00:43.159 --> 00:00:47.479
The first point is the mean of the state, and then,

00:00:47.479 --> 00:00:49.129
we have another two points per

00:00:49.130 --> 00:00:52.969
state dimension which will be spread in different directions.

00:00:52.969 --> 00:00:56.310
In our case, this would be 11 Sigma points.

00:00:56.310 --> 00:00:58.484
To make things easier right now,

00:00:58.484 --> 00:01:02.164
we will consider only two dimensions of our state vector,

00:01:02.164 --> 00:01:05.855
the position Px and the position Py.

00:01:05.855 --> 00:01:08.410
This makes it easier to visualize what's happening.

00:01:08.409 --> 00:01:10.944
Now, that our state dimension is two,

00:01:10.944 --> 00:01:14.109
we are only looking for five Sigma points.

00:01:14.109 --> 00:01:16.510
Together with you, I want to calculate

00:01:16.510 --> 00:01:20.005
these five Sigma points and store them in this matrix,

00:01:20.004 --> 00:01:22.584
which I write as calligraphic X.

00:01:22.584 --> 00:01:26.364
Every column of this matrix represents one Sigma point.

00:01:26.364 --> 00:01:28.719
Let's bring this example to life and put

00:01:28.719 --> 00:01:32.829
some realistic values into the mean state and the covariance matrix,

00:01:32.829 --> 00:01:35.704
just as you will have it later in the real application.

00:01:35.704 --> 00:01:37.584
Now, if you Google for

00:01:37.584 --> 00:01:42.294
uncentered Kalman filter and look for a rule how to generate Sigma points,

00:01:42.295 --> 00:01:44.725
this is what you will find.

00:01:44.724 --> 00:01:47.424
This looks awful.

00:01:47.424 --> 00:01:51.804
Maybe this is why people don't use the uncentered Kalman filter more often.

00:01:51.805 --> 00:01:56.690
The good news is this rule is actually pretty simple to apply.

00:01:56.689 --> 00:02:00.304
The first thing you need to know is what this Lambda is.

00:02:00.305 --> 00:02:02.510
This is a design parameter.

00:02:02.510 --> 00:02:05.950
You can choose where in relation to the error ellipse,

00:02:05.950 --> 00:02:07.954
you want to put your Sigma points.

00:02:07.954 --> 00:02:10.789
I will show you later how this effect works.

00:02:10.789 --> 00:02:17.329
Some people report good results with Lambda equals 2 3 minus nx.

00:02:17.330 --> 00:02:22.765
Another thing you might be wondering is what is the square root of a matrix?

00:02:22.764 --> 00:02:27.844
More specifically, we are looking for the matrix A which fulfills

00:02:27.844 --> 00:02:31.055
A transposed times A equals P.

00:02:31.055 --> 00:02:34.895
There are several algorithms available that will calculate such a matrix.

00:02:34.895 --> 00:02:37.670
Later, I will show you how to do this in C plus plus.

00:02:37.669 --> 00:02:41.419
But here, I'll give you the solution for the square root matrix,

00:02:41.419 --> 00:02:42.694
so we can continue,

00:02:42.694 --> 00:02:46.150
and this is actually all we need to calculate the Sigma points.

00:02:46.150 --> 00:02:48.974
So, how do we read this rule?

00:02:48.974 --> 00:02:53.555
The first column of the matrix tells us what the first Sigma point is.

00:02:53.555 --> 00:02:59.194
This is always easy because the first Sigma point is simply the mean state estimate.

00:02:59.194 --> 00:03:02.329
This term contains two more Sigma points.

00:03:02.330 --> 00:03:04.370
In this square root matrix,

00:03:04.370 --> 00:03:06.125
we have two vectors.

00:03:06.125 --> 00:03:07.969
The first vector points into

00:03:07.969 --> 00:03:12.490
this direction and the other vector points into this direction,

00:03:12.490 --> 00:03:16.879
and we multiply these vectors by this printing factor.

00:03:16.879 --> 00:03:20.870
Now, you can see what the design parameter Lambda does.

00:03:20.870 --> 00:03:22.625
If Lambda is larger,

00:03:22.625 --> 00:03:26.090
the Sigma points move further away from the mean state.

00:03:26.090 --> 00:03:27.689
If Lambda is smaller,

00:03:27.689 --> 00:03:30.335
the Sigma points move closer to the mean state.

00:03:30.335 --> 00:03:33.830
This all happens in relation to this error ellipse.

00:03:33.830 --> 00:03:37.655
In our case, the resulting Sigma points will end up here.

00:03:37.655 --> 00:03:42.860
In our example, the overall spreading factor works out to square root of three.

00:03:42.860 --> 00:03:48.875
So, we multiply this vector and this vector by the square root of three,

00:03:48.875 --> 00:03:52.000
and add it to the mean state.

00:03:52.000 --> 00:03:56.194
Finally, here we use the same vectors again.

00:03:56.194 --> 00:03:59.000
But we apply them in the opposite direction.

00:03:59.000 --> 00:04:07.395
This means that these Sigma points will show up here, and here.

00:04:07.395 --> 00:04:09.830
In the next quiz, I would like you to

00:04:09.830 --> 00:04:13.520
calculate the two remaining Sigma points from our example.

