WEBVTT
Kind: captions
Language: ja-JP

00:00:00.390 --> 00:00:05.097
ここで 思い出して ほしいのが
単純な 1Dの動きに 使った

00:00:05.097 --> 00:00:07.620
カルマンフィルターです

00:00:07.620 --> 00:00:12.980
ここでの目標が 歩行者の
追跡で 歩行者の状態xを

00:00:12.980 --> 00:00:16.890
位置と 速度で
表すとしましょう

00:00:16.890 --> 00:00:21.093
カルマンフィルターを 設計するには
2つの 線形関数を 定義する必要が あります

00:00:21.093 --> 00:00:23.888
一方の 状態遷移関数は

00:00:23.888 --> 00:00:29.090
時点k-1から 時点kの 間での
状態の変化を モデル化します

00:00:29.090 --> 00:00:33.213
他方の 測定関数は
測定の 計算方法と それが

00:00:33.213 --> 00:00:37.048
予測された状態xと どのような関係にあるかを
モデル化します

00:00:37.048 --> 00:00:41.406
これらの関数の 最初の項は
モデルの 決定論的な性格を

00:00:41.406 --> 00:00:42.670
形成します

00:00:42.670 --> 00:00:49.420
そして最後の項である ノイズνと
ノイズωは 確率的な部分を 構成します

00:00:49.420 --> 00:00:53.541
言い換えると 予測と
測定値更新のステップに 影響を 及ぼす

00:00:53.541 --> 00:00:56.270
ランダムノイズです

00:00:56.270 --> 00:01:02.494
速度が一定の 線形モーションモデルを
使った場合 歩行者の

00:01:02.494 --> 00:01:07.740
 新しい位置pは
前の位置+速度xΔt となります

00:01:07.740 --> 00:01:09.930
速度が 一定なので

00:01:09.930 --> 00:01:13.100
新しい速度は 前の
速度と 同じです

00:01:13.100 --> 00:01:16.270
これを 行列形式で
表すと こうなります

00:01:16.270 --> 00:01:20.570
測定関数については
私たちの 車両は 歩行者の位置だけを

00:01:20.570 --> 00:01:24.080
検知するので 測定関数は
こうなります

00:01:24.080 --> 00:01:28.430
これも 行列形式にすると
こうなります

00:01:28.430 --> 00:01:32.450
すでに 学んだとおり カルマンフィルターを
構成する 2つのステップは

00:01:32.450 --> 00:01:36.800
共分散pを 予測する
予測ステップと

00:01:36.800 --> 00:01:42.710
最新の測定値を 使って
状態の 推定値と不確かさを

00:01:42.710 --> 00:01:46.810
更新する 更新ステップ あるいは

00:01:46.810 --> 00:01:47.780
修正ステップです

