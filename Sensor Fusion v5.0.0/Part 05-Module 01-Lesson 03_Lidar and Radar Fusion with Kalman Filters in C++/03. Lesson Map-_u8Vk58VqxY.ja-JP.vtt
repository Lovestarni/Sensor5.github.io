WEBVTT
Kind: captions
Language: ja-JP

00:00:00.400 --> 00:00:03.830
これまで車両のセンサーについて
そしてPythonで一般的なフィルターを

00:00:03.830 --> 00:00:07.470
実装する方法について
多くを学んできました

00:00:07.469 --> 00:00:11.800
また C++について十分に理解し
カルマンを実装して

00:00:11.800 --> 00:00:14.970
フィルターリングできるように
なったはずです

00:00:14.970 --> 00:00:18.160
このレッスンでは
これらすべての知識を組み合わせて

00:00:18.160 --> 00:00:20.850
完全なフュージョンモデルを開発します

00:00:20.850 --> 00:00:24.730
フュージョンの
カルマンフィルターベースの感知には

00:00:24.730 --> 00:00:28.350
多くの要素が含まれるため
これから構築物の概要をお見せします

00:00:28.350 --> 00:00:30.929
まだすべてを理解できなくても
心配は要りません

00:00:30.929 --> 00:00:32.850
このマップは後でまた確認します

00:00:32.850 --> 00:00:33.940
まずは

00:00:33.939 --> 00:00:38.280
拡張カルマンフィルターと呼ばれるものを
構築します

00:00:38.280 --> 00:00:42.100
拡張されたのは
より複雑なモーションモデルや

00:00:42.100 --> 00:00:45.980
測定モデルを扱えるように
なった点です

00:00:45.979 --> 00:00:48.899
これが全体的な処理フローです

00:00:48.899 --> 00:00:53.019
ライダーとレーダーの
2つのセンサーがあります

00:00:53.020 --> 00:00:57.090
これらのセンサーから提供される情報は
移動中の歩行者の状態を

00:00:57.090 --> 00:00:58.940
推定するために使用され

00:00:58.939 --> 00:01:04.049
歩行者の状態は2D位置と2D速度で
表されます

00:01:04.049 --> 00:01:07.920
特定のセンサーから
新しい測定値を受け取るたびに

00:01:07.920 --> 00:01:10.019
推定機能がトリガーされます

00:01:10.019 --> 00:01:16.299
この時点で状態予測と測定値更新という
2つのステップを実行します

00:01:16.299 --> 00:01:21.140
予測ステップでは共分散で
歩行者の状態を予測します

00:01:21.140 --> 00:01:25.200
この予測では
前回の観測から現在の観測までの

00:01:25.200 --> 00:01:27.100
経過時間を考慮します

00:01:27.099 --> 00:01:30.469
測定更新ステップは
センサーのタイプによって異なります

00:01:30.469 --> 00:01:35.179
レーザーとレーダーという
2つのケースがあります

00:01:35.180 --> 00:01:39.440
現在の測定値が
レーザーセンサーによって生成された場合は

00:01:39.439 --> 00:01:44.399
標準の共通フィルターを適用して
歩行者の状態を更新します

00:01:44.400 --> 00:01:49.350
ただし レーダー測定には
非線形測定関数が含まれます

00:01:49.349 --> 00:01:52.030
そのためレーダー測定値を受け取ると

00:01:52.030 --> 00:01:55.480
さまざまな微調整を行って
測定値の更新を処理します

00:01:55.480 --> 00:01:56.280
たとえば

00:01:56.280 --> 00:02:01.480
拡張カルマンフィルターの式を使用します
これについては後で説明します

00:02:01.480 --> 00:02:03.710
面白そうでしょ？

00:02:03.709 --> 00:02:04.649
それでは始めましょう

