WEBVTT
Kind: captions
Language: ja-JP

00:00:00.310 --> 00:00:02.980
プログラミング課題を
用意しました

00:00:02.980 --> 00:00:06.400
カルマンフィルター
 更新関数のC++プログラムを

00:00:06.400 --> 00:00:08.699
実装してください

00:00:08.699 --> 00:00:10.459
始めはお手伝いします

00:00:10.460 --> 00:00:12.910
これが手始めのコードです

00:00:12.910 --> 00:00:17.144
行列操作には
Eigenライブラリーを使用してください

00:00:17.144 --> 00:00:21.004
依存性がなく
とても使いやすいです

00:00:21.004 --> 00:00:24.894
Eigenライブラリーの組み込みの
詳細については

00:00:24.894 --> 00:00:28.460
下記のリンクの
ドキュメンテーションを見てください

00:00:28.460 --> 00:00:34.999
行列操作を実行するためには
Eigen/Denseヘッダーを含める必要があります

00:00:34.999 --> 00:00:39.647
また このヘッダーで
定義されているすべての

00:00:39.646 --> 00:00:44.615
クラスと関数はEigen名前空間にあるので
ここでそれを使います

00:00:44.615 --> 00:00:49.118
次に メイン関数での
行列とベクターの操作例を

00:00:49.118 --> 00:00:51.619
示します

00:00:51.619 --> 00:00:56.199
この例はこのビデオの
コードエディターで実行できます

00:00:56.200 --> 00:01:00.930
このように共通点のある
2つの要素の垂直ベクターを作成できます

00:01:00.929 --> 00:01:05.349
またベクターサイズが
以前に指定されている場合は

00:01:05.349 --> 00:01:10.760
いわゆるコンマ初期化子を使用して
すべての係数を何らかの値に設定できます

00:01:10.760 --> 00:01:15.564
またcoutコメントを使用して
ベクターを出力できます

00:01:15.564 --> 00:01:17.134
こんな風に

00:01:17.135 --> 00:01:20.035
同じ方法で
行列を作成できます

00:01:20.034 --> 00:01:23.424
たとえば これは(2,2)行列を

00:01:23.424 --> 00:01:28.700
値1 2 3 4で
初期化しています

00:01:28.700 --> 00:01:31.480
これをプリントすると これが出力です

00:01:31.480 --> 00:01:34.410
同じコンマ初期化子を使用するか
または

00:01:34.409 --> 00:01:38.369
各行列の値を
このように明示的に設定することができます

00:01:38.370 --> 00:01:44.280
転置メソッドで行列の転置を
計算することもできます

00:01:44.280 --> 00:01:47.150
そしてこれが
行列を逆転する方法です

00:01:47.150 --> 00:01:50.460
また行列とベクターを
乗算できます

00:01:50.459 --> 00:01:53.849
普通の変数と同じように
このように

00:01:53.849 --> 00:01:56.689
Eigenライブラリーの
使い方を見たので

00:01:56.689 --> 00:02:00.420
このクイズで扱う
コードを見てみましょう

00:02:00.420 --> 00:02:06.460
トラッキングの最初の1D CPPで
すべての共通フィルター変数を宣言しました

00:02:06.459 --> 00:02:11.259
メイン関数までジャンプして
1Dモーションケースについて

00:02:11.259 --> 00:02:15.319
前のレッスンと同じ値で
初期化します

00:02:15.319 --> 00:02:18.909
全部は見えませんが
まちがいなく ここにあります

00:02:18.909 --> 00:02:23.810
そしてフィルタという名前の
空の関数を用意しています

00:02:23.810 --> 00:02:28.969
ここで最小限の測定を繰り返しています
そしてここにあなたのコードを追加してください

00:02:28.969 --> 00:02:33.560
具体的には
測定の更新と予測ステップを

00:02:33.560 --> 00:02:38.719
ループの内側に実装してください
以前に初期化した行列をすべて指定して

00:02:38.719 --> 00:02:43.008
困ったときは、セバスチャンのレッスンで
行ったフィルターリング実装を

00:02:43.008 --> 00:02:44.800
見直してください

00:02:44.800 --> 00:02:49.870
このビデオの後 Pythonでの同じ
プログラミング問題へのリンクがあります

00:02:49.870 --> 00:02:50.390
頑張ってください

