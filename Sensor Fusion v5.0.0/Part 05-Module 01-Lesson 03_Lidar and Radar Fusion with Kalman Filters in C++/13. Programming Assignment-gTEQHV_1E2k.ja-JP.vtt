WEBVTT
Kind: captions
Language: ja-JP

00:00:00.220 --> 00:00:04.309
さあ プログラミングの 次の課題です
ここでは LiDARの測定値を

00:00:04.309 --> 00:00:08.219
取り込む カルマンフィルターを 作成して
歩行者を 2Dで

00:00:08.220 --> 00:00:10.179
追跡します

00:00:10.179 --> 00:00:11.789
かなり 便利ですよね

00:00:11.789 --> 00:00:17.119
歩行者の 状態ベクターを
位置(px, py) と 速度(vx, vy)で

00:00:17.120 --> 00:00:18.850
表します

00:00:18.850 --> 00:00:20.960
スターターコードを 用意したので

00:00:20.960 --> 00:00:24.950
カルマンフィルター変数の 残りを 自分で
設定してください

00:00:24.949 --> 00:00:30.199
今回は コードが 3つの部分に
分かれています  KalmanFilterクラスと

00:00:30.199 --> 00:00:34.710
Trackingクラス そして
MeasurementPackageクラスです

00:00:34.710 --> 00:00:38.719
ここに KalmanFilterクラス それから
cppファイルと

00:00:38.719 --> 00:00:41.019
対応するヘッダーファイルが あります

00:00:41.020 --> 00:00:45.500
これは 皆さんが 作成したコードですが
KalmanFilterコード全体と 予測関数 そして

00:00:45.500 --> 00:00:50.914
更新関数が Trackingロジックから
切り離されています

00:00:50.914 --> 00:00:54.644
Trackingクラスもあり
ここでは 実際に KalmanFilterオブジェクトを

00:00:54.645 --> 00:00:56.755
作成して 使用します

00:00:56.755 --> 00:01:00.875
このクイズでは
前の測定から 現在の測定までの

00:01:00.875 --> 00:01:05.674
 経過時間に従って F行列と
Q行列を 変更します

00:01:05.674 --> 00:01:09.724
これは process_measurements関数の
内部で 実行できます

00:01:09.724 --> 00:01:14.044
その後 コードで KalmanFilterの
予測関数と 更新関数を

00:01:14.045 --> 00:01:14.939
呼び出します

00:01:16.000 --> 00:01:19.719
忘れないで ほしいのは
Kalman Filterの行列や

00:01:19.719 --> 00:01:25.429
予測関数 そして更新関数が すべて
kfオブジェクトの メンバーであることです

00:01:25.430 --> 00:01:29.760
前のプログラミング問題と この問題には
大きな違いがあります

00:01:29.760 --> 00:01:33.990
ここでは 一連の測定値を すべて
処理するのではなく

00:01:33.989 --> 00:01:36.539
最新の測定値だけを 処理します

00:01:36.540 --> 00:01:41.170
これは より現実的な シナリオの
シミュレーションであり このシナリオでは

00:01:41.170 --> 00:01:46.629
センサーから 新しいデータが 届くたびに
process_measurement関数が 呼び出されます

00:01:46.629 --> 00:01:49.539
この例では センサーとして
レーザースキャナーだけを 使います

00:01:49.540 --> 00:01:53.800
また ここではセンサーデータが
パッケージオブジェクトとして 整理されます

00:01:53.799 --> 00:01:57.859
これらの測定値パッケージは
引数として process_measurement関数に

00:01:57.859 --> 00:01:58.969
渡されます

00:01:58.969 --> 00:02:00.379
ここで わかるとおり

00:02:00.379 --> 00:02:04.280
パッケージプロパティは
MeasurementPackageクラスに まとめられています

00:02:04.280 --> 00:02:08.520
このクラスの 構成要素のうち
タイムスタンプ変数は

00:02:08.520 --> 00:02:12.810
センサーによって 測定値が作成された
時点を 示し

00:02:12.810 --> 00:02:18.199
列挙型変数の SensorTypeは
LASERと RADARの オプションを 持ちます

00:02:18.199 --> 00:02:22.229
これは 今は 重要ではありません
レーザーの 測定値だけを 使うからです

00:02:22.229 --> 00:02:27.049
それから 最新の 生の測定値を持つ
ベクター変数もあります

00:02:27.050 --> 00:02:31.590
特に 測定値パッケージが
レーザーセンサーから 来る場合は

00:02:31.590 --> 00:02:36.909
生測定値のベクターには 観測された 
x位置と y位置だけが 含まれます

00:02:36.909 --> 00:02:41.490
そして これは 測定パッケージから
データを 読み取る例です

00:02:41.490 --> 00:02:45.760
xの測定値 yの測定値
そして タイムスタンプが あります

00:02:45.759 --> 00:02:51.349
これらの値を 出力すると
結果は こんな感じになります

00:02:51.349 --> 00:02:55.519
x位置と
y位置と タイムスタンプです

00:02:55.520 --> 00:02:58.719
タイムスタンプ変数に
割り当てられた 大きな値は

00:02:58.719 --> 00:03:03.524
1970年1月1日（木）からの
経過時間を マイクロ秒で

00:03:03.524 --> 00:03:08.210
表したもので 当然ながら 常に増加します

00:03:08.210 --> 00:03:12.927
ここで 指摘したいのは
この課題の Trackingコードが

00:03:12.926 --> 00:03:18.229
まず 予測関数を 呼び出し
その後で 更新関数を 呼び出すことです

00:03:18.229 --> 00:03:22.849
これは 予測が 2つの
測定値の間の 経過時間に 依存し

00:03:22.849 --> 00:03:26.609
その時間が
固定されていないためです

00:03:26.610 --> 00:03:32.490
そのため 状態を予測するためには
次の観測タイムスタンプを 取得する必要があります

00:03:32.490 --> 00:03:36.659
基本的には process_measurementの
次回の呼び出しを 待ってから

00:03:36.659 --> 00:03:41.349
予測を 適用し その直後に
次の測定値更新が 行われます

00:03:41.349 --> 00:03:46.310
process_measurementの 最初の
呼び出しは 状態の位置を xと yの

00:03:46.310 --> 00:03:51.949
最初の測定値で 初期化し
状態の 速度の vy vxを 0で 初期化します

00:03:51.949 --> 00:03:57.719
これは 初期速度が 不明であると 仮定しています
これで 終わりです

00:03:57.719 --> 00:03:59.971
何か わからないときは

00:03:59.971 --> 00:04:04.230
コードのコメントを 見れば
指示が 書いてあります

00:04:04.229 --> 00:04:04.840
がんばってください

