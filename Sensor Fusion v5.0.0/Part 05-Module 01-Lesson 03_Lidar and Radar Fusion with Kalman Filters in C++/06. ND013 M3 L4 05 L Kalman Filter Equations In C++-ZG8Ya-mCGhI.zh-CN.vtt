WEBVTT
Kind: captions
Language: zh-CN

00:00:00.390 --> 00:00:05.097
现在 我们再快速回顾一下简单的一维

00:00:05.097 --> 00:00:07.620
运动场景下的卡尔曼滤波器

00:00:07.620 --> 00:00:12.980
假设我们的任务是追踪一个行人 他的状态

00:00:12.980 --> 00:00:16.890
X 由位置和速度描述

00:00:16.890 --> 00:00:21.093
设计卡尔曼滤波器时 我们必须定义两个线性函数：

00:00:21.093 --> 00:00:23.888
状态转移函数

00:00:23.888 --> 00:00:29.090
该函数对从时间 k-1 到时间 k 的状态变化进行建模

00:00:29.090 --> 00:00:33.213
以及测量函数 该函数对测量值的计算方式

00:00:33.213 --> 00:00:37.048
以及测量值和预测状态 x 的关联进行建模

00:00:37.048 --> 00:00:41.406
这些函数中的第一项表述的是模型中的

00:00:41.406 --> 00:00:42.670
确定性部分

00:00:42.670 --> 00:00:49.420
尾项噪声 v 和 噪声 w 表述的是随机部分

00:00:49.420 --> 00:00:53.541
也就是影响预测和测量更新步骤的

00:00:53.541 --> 00:00:56.270
随机误差

00:00:56.270 --> 00:01:02.494
因此 使用带常量速度的线性运动模型时 行人的新位置

00:01:02.494 --> 00:01:07.740
p 就等于旧位置加上 速度乘以Δt

00:01:07.740 --> 00:01:09.930
因为速度是常量

00:01:09.930 --> 00:01:13.100
新速度和旧速度相同

00:01:13.100 --> 00:01:16.270
我们可以使用这样的矩阵来表示

00:01:16.270 --> 00:01:20.570
至于测量函数 我们的车辆只能感知到行人位置

00:01:20.570 --> 00:01:24.080
因此测量函数是这样的

00:01:24.080 --> 00:01:28.430
它还可以使用这样的矩阵来表示

00:01:28.430 --> 00:01:32.450
我们已经知道 卡尔曼滤波器包括一个

00:01:32.450 --> 00:01:36.800
预测步骤 我们可以预测状态和协方差 p

00:01:36.800 --> 00:01:42.710
我们还会使用一个测量更新步骤 通常叫做纠正步骤

00:01:42.710 --> 00:01:46.810
利用最新的测量值来更新状态估算

00:01:46.810 --> 00:01:47.780
及其不确定性

