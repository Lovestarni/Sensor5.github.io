WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:01.706
これが そのコードです

00:00:01.706 --> 00:00:03.754
プロセス計測関数で

00:00:03.754 --> 00:00:07.324
まず 状態遷移行列 F それから

00:00:07.325 --> 00:00:09.916
プロセス共分散行列 Q を 新しい

00:00:09.916 --> 00:00:12.074
直近の経過時間に基づいて更新します

00:00:12.074 --> 00:00:17.609
最後に カルマンフィルターpredictを 呼び出して 更新します

00:00:17.609 --> 00:00:19.335
ビジュアライゼーションが どうなるか

00:00:19.335 --> 00:00:22.530
実際に お見せしましょう

00:00:22.530 --> 00:00:25.980
ここでは 歩行者が 8の字を描いて 歩いています

00:00:25.980 --> 00:00:28.050
ご覧の とおり

00:00:28.050 --> 00:00:31.844
オレンジの点は レーザー測定値 つまり

00:00:31.844 --> 00:00:35.795
観測されたpxと pyの 位置です

00:00:35.795 --> 00:00:38.655
緑の線が 歩行者の実際の経路

00:00:38.655 --> 00:00:41.295
つまり グランドトルースです

00:00:41.295 --> 00:00:46.725
そして 青い線が カルマンフィルターの解による 推定位置です

00:00:46.725 --> 00:00:49.649
推定したトラジェクトリーは 計測ノイズや プロセスノイズの

00:00:49.649 --> 00:00:53.609
選択方法によって 異なる可能性があります

00:00:53.609 --> 00:00:59.414
たとえば ここで 計測ノイズを 増加させ 計測共分散行列Rの

00:00:59.414 --> 00:01:02.850
対角成分が 2に なるようにします

00:01:02.850 --> 00:01:04.004
拡大して

00:01:04.004 --> 00:01:06.000
細かく 見てみると

00:01:06.000 --> 00:01:10.894
推定結果を 測定値や グラウンドトルースと 比べることができます

00:01:10.894 --> 00:01:16.019
歩行者が 直線的に 動いているところでは かなりよく推定されています

00:01:16.019 --> 00:01:19.634
しかし 線形モーションモデルは 完璧ではなく

00:01:19.635 --> 00:01:22.380
特に 歩行者が このように

00:01:22.379 --> 00:01:26.239
カーブを描いて 動くと 正確でなくなります

00:01:26.239 --> 00:01:27.869
私たちは 歩行者が

00:01:27.870 --> 00:01:31.814
常に 直線に沿って 動くと予測してしまうのですが

00:01:31.814 --> 00:01:36.015
実際には 緑のトラジェクトリーに 沿っているわけです

00:01:36.015 --> 00:01:40.659
そのため 推定が 実際の状態を 過小評価してしまいます

00:01:40.659 --> 00:01:43.219
これは どうすれば 解決できるでしょうか

00:01:43.219 --> 00:01:46.275
線形モーションモデルを 使うのではなく

00:01:46.275 --> 00:01:48.060
円周運動などの 複雑なモーションモデルを

00:01:48.060 --> 00:01:51.674
使って 推定する方法が あります

00:01:51.674 --> 00:01:54.929
それについては 次のレッスンで 学習します

00:01:54.930 --> 00:01:58.670
それでは、レーザーデータで更新できるようになったので、

00:01:58.670 --> 00:02:01.129
レーザーデータの使い方を見てみましょう

00:02:01.129 --> 00:02:03.414
それこそが カルマンフィルターの実力です

00:02:03.415 --> 00:02:07.050
異なるセンサーから 得た データソースを使って

00:02:07.049 --> 00:02:11.000
物体の状態を より正確に 推定できます

