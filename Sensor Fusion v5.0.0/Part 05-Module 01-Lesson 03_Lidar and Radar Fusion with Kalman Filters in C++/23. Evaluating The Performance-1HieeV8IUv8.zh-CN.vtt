WEBVTT
Kind: captions
Language: zh-CN

00:00:00.280 --> 00:00:02.929
当我们实现了追踪算法之后

00:00:02.930 --> 00:00:05.380
我们需要检查算法效果如何

00:00:05.379 --> 00:00:10.059
评估估算结果和真实结果差别有多大

00:00:10.060 --> 00:00:12.700
有很多评估标准

00:00:12.699 --> 00:00:17.259
但最常见的标准叫做均方根误差

00:00:17.260 --> 00:00:20.400
在追踪场景下 它是一个准确度标准

00:00:20.399 --> 00:00:24.959
可测量估算状态和真实状态之间的偏差

00:00:24.960 --> 00:00:27.150
我们看一下它的计算方式

00:00:27.149 --> 00:00:31.669
在这个给定的处理步骤中 我只需要两个值

00:00:31.670 --> 00:00:36.630
估算状态 这是一个向量 带有位置和速度分量

00:00:36.630 --> 00:00:41.880
以及真实数值 通常叫做标定的真实数值

00:00:41.880 --> 00:00:44.219
估算状态和真实状态

00:00:44.219 --> 00:00:47.835
之间的差叫做残差

00:00:47.835 --> 00:00:51.539
这些残差先平方然后求均值

00:00:51.539 --> 00:00:55.060
最后得到的平方根就是误差

00:00:55.060 --> 00:00:59.800
误差越低 估算准确率越高

00:00:59.799 --> 00:01:02.529
我们看一下在 C++ 中如何实现

00:01:02.530 --> 00:01:05.079
我给你一个初始代码

00:01:05.079 --> 00:01:11.049
你要完成 CalculateRMSE 函数 它以

00:01:11.049 --> 00:01:16.109
系列估算状态， 以及一系列对应的真实状态作为参数

00:01:16.109 --> 00:01:20.079
然后返回一个带有位置和速度的均方根误差的

00:01:20.079 --> 00:01:21.159
向量

00:01:21.159 --> 00:01:23.489
同时，你需要对估计向量和真值向量进行校验

00:01:23.489 --> 00:01:28.608
以防止无效输入

00:01:28.608 --> 00:01:31.549
估算向量应该是非空的

00:01:31.549 --> 00:01:34.840
且向量维数必须和真值向量一致

00:01:34.840 --> 00:01:37.650
因此 你必须使用 Eigen 的函数执行

00:01:37.650 --> 00:01:39.830
所有必需的运算

00:01:39.829 --> 00:01:44.609
有时候 你还需要从另一个向量中减去向量 如本例所示

00:01:44.609 --> 00:01:49.280
你可以进行系数乘法运算 像这里一样

00:01:49.280 --> 00:01:52.099
也可以在这里计算向量元素的平方根

