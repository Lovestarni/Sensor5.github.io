WEBVTT
Kind: captions
Language: ja-JP

00:00:00.320 --> 00:00:02.730
このレッスンの図で確認しましょう

00:00:02.730 --> 00:00:07.769
次に必要なのは線形化で対象は
関数 x の小文字 h です

00:00:07.769 --> 00:00:10.480
微分係数から始まることを
覚えておいてください

00:00:10.480 --> 00:00:11.740
では始めましょう

00:00:11.740 --> 00:00:15.789
前の例を
より高い次元に一般化する場合

00:00:15.789 --> 00:00:21.939
h(x) の x に対する
微分係数はヤコビと呼ばれます

00:00:21.940 --> 00:00:26.670
そしてすべての偏微分係数を含む
行列となります

00:00:26.670 --> 00:00:29.970
たとえば
関数の小文字 h では

00:00:29.969 --> 00:00:35.350
この最初の行で
関数の第 1 の次元

00:00:35.350 --> 00:00:40.219
h1 が導出され 
x の第 1 の次元

00:00:40.219 --> 00:00:44.289
x の第 2 の次元 
x の第 n の次元に対応します

00:00:44.289 --> 00:00:49.091
次にこれを小文字 h の
各次元について繰り返します

00:00:49.091 --> 00:00:54.777
詳しく言うと
測定関数は

00:00:54.777 --> 00:00:59.679
3 要素 つまり距離
方位 範囲レートを記述し

00:00:59.679 --> 00:01:05.250
状態は 4 要素を持つベクターで
それぞれ Px Py Vx Vy となります

00:01:05.250 --> 00:01:11.250
その場合 ヤコビ行列 Hj は
3 行

00:01:11.250 --> 00:01:12.459
4 列になります

00:01:12.459 --> 00:01:17.329
これらすべての偏微分係数の計算後に
この行列を取得します

00:01:17.329 --> 00:01:21.750
この結果を得る方法について
関心がある場合は

00:01:21.750 --> 00:01:23.659
下の詳細をご覧ください

00:01:23.659 --> 00:01:25.429
これをプログラミングしましょう

00:01:25.430 --> 00:01:29.490
では CalculateJacobian 関数を
実装してみてください

00:01:29.489 --> 00:01:32.179
この関数は現在の
予測状態を使用して

00:01:32.180 --> 00:01:36.300
前に説明した新しいヤコビ行列
Hj を計算します

00:01:36.299 --> 00:01:42.019
たとえば 予測状態が
x で 1 2 0.2 0.4 に等しい場合

00:01:42.019 --> 00:01:49.409
出力する 3x4 の行列は
次の値を持つものとします

00:01:49.409 --> 00:01:53.429
コードをこの場所の
CalculateJacobian 関数に入力してください

00:01:53.430 --> 00:01:58.440
また ヤコビ計算時には
0 で割らないようにする必要があります

00:01:58.439 --> 00:02:02.349
つまり x と y のいずれも
0 でないことを確認する必要があります

00:02:02.349 --> 00:02:06.259
0 で割ると
エラーメッセージがそのように出力されます

