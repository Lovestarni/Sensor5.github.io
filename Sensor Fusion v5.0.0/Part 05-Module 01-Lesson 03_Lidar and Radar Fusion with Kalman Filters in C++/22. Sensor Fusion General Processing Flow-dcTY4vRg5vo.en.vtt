WEBVTT
Kind: captions
Language: en

00:00:00.290 --> 00:00:06.070
So here is my overall processing flow
that combines what we've learned so far.

00:00:06.070 --> 00:00:08.090
We have a moving pedestrian.

00:00:08.090 --> 00:00:12.610
Its state is represented by a 2D
position and a 2D velocity.

00:00:12.610 --> 00:00:17.310
x is equal to px, py, vx, vy.

00:00:17.310 --> 00:00:20.930
Each time we receive new
measurements from a given sensor,

00:00:20.930 --> 00:00:24.460
the estimation function process
measurement is triggered.

00:00:24.460 --> 00:00:28.956
So, at first iteration,
we just initialize the state and

00:00:28.956 --> 00:00:31.040
covariance matrix.

00:00:31.040 --> 00:00:35.180
Subsequently, we call the prediction and
measurement update.

00:00:35.180 --> 00:00:38.940
Before prediction we, have to compute
the elapsed time between the current and

00:00:38.940 --> 00:00:40.500
previous observation.

00:00:40.500 --> 00:00:45.090
And based on the elapsed time,
we calculate new state transition and

00:00:45.090 --> 00:00:47.230
process covariance matrices.

00:00:47.230 --> 00:00:50.122
The measurement update step
depends on sensor type.

00:00:50.122 --> 00:00:53.778
So if the current observations
come from a radar sensor,

00:00:53.778 --> 00:00:58.727
then we have to compute the new Jacobian
Hj, use the non-linear measurement

00:00:58.727 --> 00:01:03.995
function to project the predicted
state and call the measurement update.

00:01:03.995 --> 00:01:08.723
Otherwise, if the current observations
are generated by a laser sensor,

00:01:08.723 --> 00:01:12.699
then we just set up the extended
Kalman filter with the laser H and

00:01:12.699 --> 00:01:15.865
R matrices and
then call the measurement update.

