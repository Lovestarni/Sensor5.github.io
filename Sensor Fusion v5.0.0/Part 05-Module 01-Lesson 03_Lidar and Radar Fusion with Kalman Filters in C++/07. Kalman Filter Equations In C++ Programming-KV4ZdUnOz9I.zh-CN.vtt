WEBVTT
Kind: captions
Language: zh-CN

00:00:00.310 --> 00:00:02.980
我为你准备了一个编程任务

00:00:02.980 --> 00:00:06.400
我希望你为卡尔曼滤波器更新方程

00:00:06.400 --> 00:00:08.699
编写一个 C++ 程序

00:00:08.699 --> 00:00:10.459
开始时我会帮你

00:00:10.460 --> 00:00:12.910
这里是初始代码

00:00:12.910 --> 00:00:17.144
为了进行矩阵运算 我必须包括头文件Eigen/Dense

00:00:17.144 --> 00:00:21.004
它没有依赖 非常易用

00:00:21.004 --> 00:00:24.894
要了解如何使用 Eigen 库

00:00:24.894 --> 00:00:28.460
你可以看看下面链接提供的文档

00:00:28.460 --> 00:00:34.999
为了进行矩阵运算 我必须包括 Eigen/Dense 头

00:00:34.999 --> 00:00:39.647
此外，头文件中定义的所有类和函数

00:00:39.646 --> 00:00:44.615
都在 Engen 命名空间里 所以我在这里使用了改命名空间

00:00:44.615 --> 00:00:49.118
下面 我来通过几个例子展示 main

00:00:49.118 --> 00:00:51.619
函数中的矩阵和向量操作

00:00:51.619 --> 00:00:56.199
你可以在本视频的代码编辑器中运行这些例子

00:00:56.200 --> 00:01:00.930
你可以使用逗号分割，来创建一个包括两个分量的垂直向量

00:01:00.929 --> 00:01:05.349
如果向量大小之前指定过 你可以使用

00:01:05.349 --> 00:01:10.760
comma initializer 设置所有系数的值

00:01:10.760 --> 00:01:15.564
你可以使用 cout 来打印出向量

00:01:15.564 --> 00:01:17.134
就像你在这里看到的一样

00:01:17.135 --> 00:01:20.035
矩阵创建方式相同

00:01:20.034 --> 00:01:23.424
例如 这是一个初始的

00:01:23.424 --> 00:01:28.700
(2,2) 矩阵 值包括1、2、3 和 4

00:01:28.700 --> 00:01:31.480
我在这里把它们打印出来 这是我的输出

00:01:31.480 --> 00:01:34.410
你同样可以使用 comma initializer

00:01:34.409 --> 00:01:38.369
或者 你也可以明确设置每个矩阵值 像这样

00:01:38.370 --> 00:01:44.280
你还可以使用 transpose 方法来计算一个矩阵的转置

00:01:44.280 --> 00:01:47.150
这里是如何求逆矩阵

00:01:47.150 --> 00:01:50.460
你可以把矩阵和向量相乘

00:01:50.459 --> 00:01:53.849
就像常规变量操作一样 请看这里

00:01:53.849 --> 00:01:56.689
现在 你已经知道了如何使用 Eigen 库

00:01:56.689 --> 00:02:00.420
我们看看这次测验中你用到的代码

00:02:00.420 --> 00:02:06.460
在 track_1D.cpp 文件顶部 我声明了所有卡尔曼滤波器的变量

00:02:06.459 --> 00:02:11.259
下面我们看一维运动案例的 main 函数

00:02:11.259 --> 00:02:15.319
使用前一课同样的值初始化

00:02:15.319 --> 00:02:18.909
现在还无法全部看到它们 我向你保证 它们都在这里

00:02:18.909 --> 00:02:23.810
这里是一个几乎全空的滤波器函数 我遍历了

00:02:23.810 --> 00:02:28.969
所有的测量值 希望你能在这里添加你的代码

00:02:28.969 --> 00:02:33.560
具体来说 我希望你进行测量值更新 并在循环内

00:02:33.560 --> 00:02:38.719
完成预测步骤 依据是所有之前初始化过的矩阵

00:02:38.719 --> 00:02:43.008
如果你需要帮助 可以回顾一下你在 Sebastian 的课上

00:02:43.008 --> 00:02:44.800
学习的滤波器实现

00:02:44.800 --> 00:02:49.870
在本视频后 有一个链接 点击即可打开使用 Python 完成的同一个编程测试

00:02:49.870 --> 00:02:50.390
祝你好运！

