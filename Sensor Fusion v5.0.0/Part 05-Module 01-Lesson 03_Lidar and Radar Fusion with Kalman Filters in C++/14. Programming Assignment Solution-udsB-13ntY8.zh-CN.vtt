WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:01.706
这是我的代码

00:00:01.706 --> 00:00:03.754
在过程测量函数里

00:00:03.754 --> 00:00:07.324
我首先更新了状态转换矩阵 F

00:00:07.325 --> 00:00:09.916
然后 根据新的时间差更新了

00:00:09.916 --> 00:00:12.074
过程协方差矩阵 Q

00:00:12.074 --> 00:00:17.609
最后 我调用了卡尔曼滤波器进行预测和更新

00:00:17.609 --> 00:00:19.335
我们下面看看

00:00:19.335 --> 00:00:22.530
结果可视化后是什么样的

00:00:22.530 --> 00:00:25.980
假设行人移动路径呈数字 8 的形状

00:00:25.980 --> 00:00:28.050
就象这样

00:00:28.050 --> 00:00:31.844
橙色点是激光测量值

00:00:31.844 --> 00:00:35.795
也就是观察到的 px 和 py 位置

00:00:35.795 --> 00:00:38.655
绿色线是行人的真实路径

00:00:38.655 --> 00:00:41.295
也就是真值

00:00:41.295 --> 00:00:46.725
蓝色线是根据卡尔曼滤波器方程估算的位置结果

00:00:46.725 --> 00:00:49.649
估算的轨迹会稍有不同

00:00:49.649 --> 00:00:53.609
具体要看我们如何选择测量值或处理误差

00:00:53.609 --> 00:00:59.414
例如 在这里 我增加测量误差这样测量协方差矩阵

00:00:59.414 --> 00:01:02.850
R 在对角线上为 2

00:01:02.850 --> 00:01:04.004
如果我放大

00:01:04.004 --> 00:01:06.000
仔细观察

00:01:06.000 --> 00:01:10.894
预测结果和测量值和地面真实数值的对比

00:01:10.894 --> 00:01:16.019
当行人沿直线移动时 结果非常好

00:01:16.019 --> 00:01:19.634
但是 我们的线性移动模型并不完美

00:01:19.635 --> 00:01:22.380
尤其是行人走圆形路径时

00:01:22.379 --> 00:01:26.239
就像这里

00:01:26.239 --> 00:01:27.869
我们始终预测

00:01:27.870 --> 00:01:31.814
行人位置在直线上的某个位置

00:01:31.814 --> 00:01:36.015
尽管真实位置是在绿色轨迹上的

00:01:36.015 --> 00:01:40.659
因此 我们的估算实际上会低估真实数值状态

00:01:40.659 --> 00:01:43.219
这个问题怎么解决？

00:01:43.219 --> 00:01:46.275
我们可以不使用线性运动模型

00:01:46.275 --> 00:01:48.060
借助更加复杂的运动模型来

00:01:48.060 --> 00:01:51.674
预测状态 比如圆形运动模型

00:01:51.674 --> 00:01:54.929
但我们要下次课才会讲到

00:01:54.930 --> 00:01:58.670
非常好！ 现在 我们可以更新激光数据了

00:01:58.670 --> 00:02:01.129
我们看看能对激光数据做哪些操作

00:02:01.129 --> 00:02:03.414
这就是卡尔曼滤波器的威力

00:02:03.415 --> 00:02:07.050
它可以利用来自不同传感器的多组数据

00:02:07.049 --> 00:02:11.000
估算出更准确的对象状态

