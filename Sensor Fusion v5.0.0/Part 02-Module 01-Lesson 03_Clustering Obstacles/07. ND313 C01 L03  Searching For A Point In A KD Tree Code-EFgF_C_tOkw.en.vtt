WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.640
All right. So let's check out the code for doing this search.

00:00:02.640 --> 00:00:04.424
So here's our search function,

00:00:04.424 --> 00:00:07.275
and we're passing in this target value that we're interested in.

00:00:07.275 --> 00:00:09.015
So it's representing suspected flow,

00:00:09.015 --> 00:00:10.860
which is x and y in this case.

00:00:10.859 --> 00:00:13.379
Then we have our distance tolerance,

00:00:13.380 --> 00:00:16.170
and we're trying to see which points in the tree are

00:00:16.170 --> 00:00:19.480
within that distance tolerance of this target point.

00:00:19.480 --> 00:00:22.274
What we're returning is this factor of ints.

00:00:22.274 --> 00:00:26.039
So we're interested in the indices of these points that are nearby.

00:00:26.039 --> 00:00:27.899
We're going to use this searchHelper,

00:00:27.899 --> 00:00:29.824
so we can do this recursively.

00:00:29.824 --> 00:00:32.359
What we're going to pass it is the target point.

00:00:32.359 --> 00:00:34.939
We're going to pass it at the start of the tree which is the root,

00:00:34.939 --> 00:00:38.044
and thus that root depth is zero.

00:00:38.045 --> 00:00:40.750
Then we're going to pass a distance tolerance and IDs,

00:00:40.750 --> 00:00:42.515
which is passing by reference.

00:00:42.515 --> 00:00:46.009
So we'll solely be building that up in our recursive function,

00:00:46.009 --> 00:00:47.479
and be returning that.

00:00:47.479 --> 00:00:49.769
So let's check out searchHelper.

00:00:49.770 --> 00:00:52.910
So if a node is not null, basically,

00:00:52.909 --> 00:00:57.819
we're just going to see if that node is within that target box or not.

00:00:57.820 --> 00:00:59.890
So we just get that x value,

00:00:59.890 --> 00:01:01.804
and we do a comparison.

00:01:01.804 --> 00:01:04.250
So that box is center of that target,

00:01:04.250 --> 00:01:10.159
and then it has this length of two times distance tolerance.

00:01:10.159 --> 00:01:12.724
So from that center, we can go minus distance tolerance,

00:01:12.724 --> 00:01:16.759
and we can go plus distance tolerance to see if it's in that region or not.

00:01:16.760 --> 00:01:20.734
That's what we're doing for x, and we do the exact same thing for y.

00:01:20.734 --> 00:01:23.155
So that'll tell us if that node,

00:01:23.155 --> 00:01:27.495
x y values is inside that box, that target box.

00:01:27.495 --> 00:01:30.740
If it is, then we're just going to go ahead and check out the distance of it.

00:01:30.739 --> 00:01:36.219
So we're just going to find the distance between the node x y in the target x y.

00:01:36.219 --> 00:01:39.980
If the distance is less than or equal to distance tolerance,

00:01:39.980 --> 00:01:46.120
then we're going to go ahead and push back the node ID onto IDs.

00:01:46.120 --> 00:01:48.240
Then after we're done doing that,

00:01:48.239 --> 00:01:51.589
that box check, we're just seeing where we want to flow in the tree.

00:01:51.590 --> 00:01:53.075
If you want to flow left or right.

00:01:53.075 --> 00:01:55.609
So we do that by checking the box boundary.

00:01:55.609 --> 00:01:58.129
So we have this depth mode 2.

00:01:58.129 --> 00:01:59.914
So we're just trying to see which,

00:01:59.915 --> 00:02:03.400
if we should be doing an x or y comparison.

00:02:03.400 --> 00:02:06.770
Then we are just looking at that box boundary.

00:02:06.769 --> 00:02:09.199
So if we want to see if we should flow to the left,

00:02:09.199 --> 00:02:11.030
then we look at that very left boundary.

00:02:11.030 --> 00:02:13.280
So we do minus distance tolerance here,

00:02:13.280 --> 00:02:18.169
and we see if that's less than this node x or y value,

00:02:18.169 --> 00:02:19.774
whichever one that we're comparing.

00:02:19.775 --> 00:02:23.960
If it is, then we know that that box is in that left region,

00:02:23.960 --> 00:02:25.129
and if it's in that left region,

00:02:25.129 --> 00:02:28.039
we just call searchHelper with the node left.

00:02:28.039 --> 00:02:32.694
So we're flowing to the left and we go ahead and increment depth by one.

00:02:32.694 --> 00:02:35.944
We do the exact same thing for the right side.

00:02:35.944 --> 00:02:39.199
So the only difference here is we're seeing if it's greater than.

00:02:39.199 --> 00:02:41.493
So if that box,

00:02:41.493 --> 00:02:48.710
that very left edge of the box is greater than that node x or y value,

00:02:48.710 --> 00:02:51.530
then that box is in the right region.

00:02:51.530 --> 00:02:52.789
We do the exact same thing,

00:02:52.789 --> 00:02:53.884
so we go node right,

00:02:53.884 --> 00:02:56.569
and we go ahead and do depth plus 1.

00:02:56.569 --> 00:02:59.919
Then we can check this function and cluster,

00:02:59.919 --> 00:03:01.699
they're in line 115.

00:03:01.699 --> 00:03:04.159
We have this kind of a test search.

00:03:04.159 --> 00:03:05.870
We're just going to call the tree and search.

00:03:05.870 --> 00:03:10.640
I was going to go ahead and use minus 67 with a distance tolerance of three,

00:03:10.639 --> 00:03:12.664
and see which indices lie in there,

00:03:12.664 --> 00:03:16.379
and we'd expect indices 0,1,2, and 3.

00:03:16.379 --> 00:03:19.990
So let's go ahead and run that.

00:03:20.240 --> 00:03:23.020
Our output is 0,1,2, and 3.

00:03:23.020 --> 00:03:25.130
So our point was over in this region,

00:03:25.129 --> 00:03:26.884
we had this distance tolerance of three.

00:03:26.884 --> 00:03:33.509
So here is those four points with index 0,1,2, and 3.

