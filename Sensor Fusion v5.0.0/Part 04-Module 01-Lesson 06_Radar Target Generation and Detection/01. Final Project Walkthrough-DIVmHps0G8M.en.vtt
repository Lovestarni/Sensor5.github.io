WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.089
Let's do a walk-through for our final project.

00:00:03.089 --> 00:00:08.504
First, we will configure the FMCW waveform based on the system requirements.

00:00:08.505 --> 00:00:14.040
Then, we will define the range and velocity of target and simulate its displacement.

00:00:14.039 --> 00:00:15.719
For the same simulation loop,

00:00:15.720 --> 00:00:20.205
we will process the transmit and receive signal to determine the beat signal.

00:00:20.204 --> 00:00:25.454
After that, we will perform range of FFT on the received signal to determine the range.

00:00:25.454 --> 00:00:27.239
Then towards the end,

00:00:27.239 --> 00:00:32.640
we will perform the CFAR processing on the output of second FFT to display the target.

00:00:32.640 --> 00:00:34.994
Here we have the system requirements.

00:00:34.994 --> 00:00:36.479
As you can see in this table,

00:00:36.479 --> 00:00:38.279
we want to design a radar which operates at

00:00:38.280 --> 00:00:41.795
77 gigahertz and has a range resolution of one meter.

00:00:41.795 --> 00:00:44.760
It should be able to detect the targets at 200 meter,

00:00:44.759 --> 00:00:47.824
at the max velocity of 70 meter per second.

00:00:47.825 --> 00:00:51.915
Using them, we can define our FMCW waveform.

00:00:51.914 --> 00:00:55.894
In the code, provide the initial range and velocity of the target.

00:00:55.895 --> 00:00:58.820
Range cannot exceed the max value of 200 meters,

00:00:58.820 --> 00:01:04.409
and the velocity can be any value in the range of minus 70 to plus 70 meter per second.

00:01:04.409 --> 00:01:08.629
Next, calculate the FMCW chirp parameters.

00:01:08.629 --> 00:01:11.405
This is where we model the signal propagation.

00:01:11.405 --> 00:01:13.174
In terms of wave equation,

00:01:13.174 --> 00:01:17.784
this is how the FMCW transmit and receive signals are defined.

00:01:17.784 --> 00:01:22.114
A received signal is just the time delayed version of the transmit signal.

00:01:22.114 --> 00:01:24.019
On mixing these two signals,

00:01:24.019 --> 00:01:26.420
we can calculate the range and Doppler information

00:01:26.420 --> 00:01:29.435
for targets as seen in the last equation.

00:01:29.435 --> 00:01:33.600
The FFT implementation directly extracts both.

00:01:33.599 --> 00:01:37.069
Similarly the target displacement for constant velocity model.

00:01:37.069 --> 00:01:40.069
For each displacement, measure the beat signal.

00:01:40.069 --> 00:01:43.044
Rather loop for a length of total time,

00:01:43.045 --> 00:01:48.500
then displace the target at each time stamp based on its initial constant velocity.

00:01:48.500 --> 00:01:50.209
At the same time, keep updating

00:01:50.209 --> 00:01:53.809
the trip time which is also the delay time for received signal.

00:01:53.810 --> 00:01:56.155
Update the transmit and received signal,

00:01:56.155 --> 00:02:00.920
and at the end mix the transmitted received signal to generate the beat signal.

00:02:00.920 --> 00:02:02.734
Moving on to the next part.

00:02:02.734 --> 00:02:05.719
Here, first reshape the mixed signal into a dimension

00:02:05.719 --> 00:02:09.069
of number of range samples into number of Doppler samples,

00:02:09.069 --> 00:02:12.469
then implement the Range FFT or one-dimensional FFT

00:02:12.469 --> 00:02:16.414
along the range dimension of the mix signal, just calculated.

00:02:16.414 --> 00:02:18.754
Once you implement the range of FFT,

00:02:18.754 --> 00:02:21.650
you will get a peek at the targets range value.

00:02:21.650 --> 00:02:24.400
We just need to make sure that the peak is at correct range.

00:02:24.400 --> 00:02:27.215
At this point, don't worry about the amplitude.

00:02:27.215 --> 00:02:29.795
Now, implementing 2D FFT.

00:02:29.794 --> 00:02:32.299
The code for 2D FFT is already part of

00:02:32.300 --> 00:02:37.415
the main file and the output which is Range Doppler map appears like this.

00:02:37.414 --> 00:02:41.120
What we generally see is the bird's eye view of this plot.

00:02:41.120 --> 00:02:44.390
Here, the peak belongs to the target,

00:02:44.389 --> 00:02:47.254
and a three-axis relates to its estimated range,

00:02:47.254 --> 00:02:49.254
velocity, and signal strength.

00:02:49.254 --> 00:02:52.519
The image is colored map as per signal strength.

00:02:52.520 --> 00:02:54.110
As you can see in the image,

00:02:54.110 --> 00:02:56.555
there is distributed noise everywhere else.

00:02:56.555 --> 00:03:00.125
Some of this highest trend noise can create false alarms.

00:03:00.125 --> 00:03:04.740
Next, we're going to implement the 2DC four on the output of second FFT.

00:03:04.740 --> 00:03:07.430
Here, we'll be estimating the noise threshold

00:03:07.430 --> 00:03:12.010
dynamically by measuring the average signal level in the training cells.

00:03:12.009 --> 00:03:16.399
Only if the signal level in the cell and the test is higher than the threshold,

00:03:16.400 --> 00:03:18.724
then we declare it as a target.

00:03:18.724 --> 00:03:22.129
Let's see how to implement the code for 2D C4.

00:03:22.129 --> 00:03:25.104
Determine the number of training sales for each dimension.

00:03:25.104 --> 00:03:28.090
Similarly, take the number of Guard cells.

00:03:28.090 --> 00:03:31.205
Set as an offset based on the SNR value.

00:03:31.205 --> 00:03:34.925
Slide the cell and a test across the complete matrix.

00:03:34.925 --> 00:03:39.865
Make sure it is the training and guard cells away from all the edges of the 2D matrix.

00:03:39.865 --> 00:03:44.900
Now, step through each of the bins and the great surrounding the cell under test.

00:03:44.900 --> 00:03:47.420
Exclude the guard cells and cell under

00:03:47.419 --> 00:03:51.964
test such that only the training cells a step through for measuring noise.

00:03:51.965 --> 00:03:54.469
Once done, now measure the noise across

00:03:54.469 --> 00:03:58.294
the training cells and take an average. Point to note.

00:03:58.294 --> 00:04:00.844
You cannot sum this db values,

00:04:00.844 --> 00:04:05.438
so you need to convert it into power using db2 power function,

00:04:05.438 --> 00:04:07.484
and after summing and averaging,

00:04:07.485 --> 00:04:11.680
convert it back to db using power to db function.

00:04:11.680 --> 00:04:17.644
Then, add the offset to the threshold to keep the false alarm to the desired value.

00:04:17.644 --> 00:04:22.805
At the end, determine the signal level at the cell under test so that,

00:04:22.805 --> 00:04:26.420
if the signal and the cell under test is greater than the threshold,

00:04:26.420 --> 00:04:28.340
then assign it a value one,

00:04:28.339 --> 00:04:31.279
else equate it to zero.

00:04:31.279 --> 00:04:34.144
This should be the output of your hard work.

00:04:34.144 --> 00:04:36.949
As you can see, the two-dimensional C4 process

00:04:36.949 --> 00:04:41.310
thresholds all the noise and just spits out the real target.

